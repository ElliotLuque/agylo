datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Comment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  body          String   @db.Text

  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String

  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        Int

  attachments   Attachment[]

  @@index([authorId])
  @@index([taskId])
}

model Attachment {
  id            Int      @id @default(autoincrement())
  url           String   @db.Text
  filename      String

  comment       Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     Int?

  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        Int

  @@index([commentId])
  @@index([taskId])
}

model LabelColor {
  id          Int    @id @default(autoincrement())
  background  String 
  foreground  String 
  labels      Label[]

  @@unique([background, foreground])
}

model Priority {
  id        Int      @id @default(autoincrement())
  name      String
  tasks     Task[]
}

model Label {
  id              Int      @id @default(autoincrement())
  name            String

  color           LabelColor @relation(fields: [colorId], references: [id])
  colorId         Int

  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       Int

  tasksLabels     TaskLabels[]

  @@index([colorId])
  @@index([projectId])
}

model TaskLabels {
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   Int

  label    Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId  Int

  @@id([taskId, labelId])

  @@index([labelId])
  @@index([taskId])

}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?   @db.Text
  taskKey     String  @unique
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  index       Int

  commentCount Int?
  attachmentCount Int?

  column      Column   @relation(fields: [columnId], references: [id], onDelete: NoAction)
  columnId    Int

  priority    Priority? @relation(fields: [priorityId], references: [id], onDelete: SetNull)
  priorityId  Int?

  author      User?   @relation(fields: [authorId], references: [id], name: "author", onDelete: SetNull)
  authorId    String?

  assignee     User?   @relation(fields: [assigneeId], references: [id], name: "assignee", onDelete: SetNull)
  assigneeId   String?

  labels      TaskLabels[]
  comments    Comment[]
  attachments Attachment[]

  @@index([columnId])
  @@index([priorityId])

  @@index([authorId])
  @@index([assigneeId])
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  index     Int

  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  
  tasks     Task[]

  @@index([projectId])
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  users      ProjectParticipants[]
}

model ProjectParticipants {
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int

  @@id([projectId, userId])

  @@index([roleId])
  @@index([userId])
  @@index([projectId])
}

model Project {
  id            Int         @id @default(autoincrement())
  name          String
  url           String      @unique
  description   String?      
  key           String     
  taskCount     Int         @default(0)
  createdAt     DateTime    @default(now())

  iconId        Int
  icon          Icon        @relation(fields: [iconId], references: [id])

  participants  ProjectParticipants[]
  columns       Column[]
  labels        Label[]

  @@index([iconId])
}

model Icon {
  id          Int      @id @default(autoincrement())
  color       String   @db.Text
  projects    Project[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  userProjects  ProjectParticipants[]
  createdTasks  Task[]   @relation("author")
  assignedTasks Task[]   @relation("assignee")
  comments      Comment[]

}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  refresh_token_expires_in Int?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
